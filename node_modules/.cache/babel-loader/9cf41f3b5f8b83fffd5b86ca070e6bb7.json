{"ast":null,"code":"var _jsxFileName = \"/home/dev/Desktop/TestProject/search/src/components/search.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Fuse from 'fuse.js';\nimport text from './dictionary.txt'; // import characters from './characters.json';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Search() {\n  _s();\n\n  const [query, updateQuery] = useState('');\n  const [instance, setinstance] = useState([]);\n  let list = ['Kelly', 'Creed', 'Stanley', 'Crowd', 'Steel'];\n  fetch(text).then(function (response) {\n    response.text().then(function (text) {\n      setinstance(text.split(\"\\n\")); // console.log(instance);\n    });\n  }); // fetch(text)\n  //  .then( r => r.text() )\n  //  .then( t => instance=t )\n  // const fs = require(\"fs\");\n  // const customerFile = fs.readFileSync(text, \"utf-8\");\n  // const customerArr = customerFile.split(\"n\");\n  // customerArr.map(i => JSON.parse(i));\n  // console.log(\"hello\");\n  // var fs = require(\"fs\");\n  // fs.readFile(text, function(text){\n  //     var textByLine = text.split(\"\\n\")\n  // });\n\n  setTimeout(() => {\n    list = instance;\n  }, 1000);\n  console.log(list); // const demo = list.length();\n\n  let options = {\n    shouldSort: true,\n    tokenize: true,\n    matchAllTokens: true,\n    findAllMatches: true,\n    threshold: 0,\n    location: 0,\n    distance: 0,\n    maxPatternLength: 32,\n    minMatchCharLength: 1 // don't include the keys property\n\n  };\n  const fuse = new Fuse(list, options); // console.log(list)\n\n  const results = fuse.search(query);\n  const characterResults = results.length !== 0 ? results.map(character => character.item) : list;\n\n  function onSearch({\n    currentTarget\n  }) {\n    updateQuery(currentTarget.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Characters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: characterResults.map(character => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Name:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 21\n                }, this), \" \", character]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)\n          }, character, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"search\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: query,\n            onChange: onSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Search, \"739Ko2ia6T8fCIQLn9axwUbAvyY=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/dev/Desktop/TestProject/search/src/components/search.jsx"],"names":["React","useState","Fuse","text","Search","query","updateQuery","instance","setinstance","list","fetch","then","response","split","setTimeout","console","log","options","shouldSort","tokenize","matchAllTokens","findAllMatches","threshold","location","distance","maxPatternLength","minMatchCharLength","fuse","results","search","characterResults","length","map","character","item","onSearch","currentTarget","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Fuse from 'fuse.js';\nimport text from './dictionary.txt'\n\n// import characters from './characters.json';\n\n\nexport  default function Search() {\n  const [query, updateQuery] = useState('');\n  const [instance,setinstance]=useState([]);\n\n  let list = ['Kelly', 'Creed', 'Stanley','Crowd','Steel'];\n   fetch(text).then(function(response) {\n    response.text().then(function(text) {\n    setinstance(text.split(\"\\n\"));\n    // console.log(instance);\n    });\n    \n  });\n\n  // fetch(text)\n  //  .then( r => r.text() )\n  //  .then( t => instance=t )\n \n\n// const fs = require(\"fs\");\n// const customerFile = fs.readFileSync(text, \"utf-8\");\n// const customerArr = customerFile.split(\"n\");\n// customerArr.map(i => JSON.parse(i));\n// console.log(\"hello\");\n\n// var fs = require(\"fs\");\n// fs.readFile(text, function(text){\n//     var textByLine = text.split(\"\\n\")\n// });\n\nsetTimeout(()=>{list=instance},1000)\n\nconsole.log(list);\n\n\n\n\n  // const demo = list.length();\n  let options = {\n  shouldSort: true,\n  tokenize: true,\n  matchAllTokens: true,\n  findAllMatches: true,\n  threshold: 0,\n  location: 0,\n  distance: 0,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n    \n    // don't include the keys property\n  };\n\n  const fuse = new Fuse(list  , options);\n  // console.log(list)\n  const results = fuse.search(query);\n  const characterResults = results.length !== 0 ? results.map(character => character.item) : list;\n\n  function onSearch({ currentTarget }) {\n    updateQuery(currentTarget.value);\n  }\n\n  return (\n    <>\n\n      <header>\n        <div >\n          <h1>Characters</h1>\n        </div>\n      </header>\n\n      <main>\n        <ul>\n          {characterResults.map(character => {\n            return (\n              <li key={character}>\n                <ul>\n                  <li>\n                    <strong>Name:</strong> { character }\n                  </li>\n                </ul>\n              </li>\n            )\n          })}\n        </ul>\n        <aside>\n          <form className=\"search\">\n            <label>Search</label>\n            <input type=\"text\" value={query} onChange={onSearch} />\n          </form>\n        </aside>\n      </main>\n\n    </>\n  );\n\n}"]},"metadata":{},"sourceType":"module"}