{"ast":null,"code":"var _jsxFileName = \"/home/dev/Desktop/TestProject/search/src/components/search.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Fuse from 'fuse.js';\nimport text from './dictionary.txt';\nimport fs from 'fs'; // import characters from './characters.json';\n// class Search extends Component {\n//   render() { \n//     const [query, updateQuery] = useState('');\n//     const [instance, setInstance]=useState([]);\n//     const [characterResults,setCharacterResults]=useState([]);\n//     // let list = ['Please','Enter','Keyword'];\n//      fetch(text).then(function(response) {\n//       response.text().then(function(text) {\n//         setInstance(text.split(\"\\n\"));\n//       });\n//     });\n//     let options = {\n//       shouldSort: true,\n//       tokenize: true,\n//       matchAllTokens: true,\n//       findAllMatches: true,\n//       threshold: 0,\n//       location: 0,\n//       distance: 0,\n//       maxPatternLength: 32,\n//       minMatchCharLength: 1,\n//         // don't include the keys property\n//       };\n//     function onChange (e){\n//       updateQuery(e.target.value);\n//     };\n//       function onSearch() {\n//         const fuse = new Fuse(instance , options);\n//         // console.log(list)\n//         const results = fuse.search(query);\n//         if(results.length!== 0)\n//         {\n//           setCharacterResults (results.map(character => character.item));\n//         }\n//         else\n//         {\n//           setCharacterResults(\"00000\");\n//         } \n//       };\n//       handleAddValue =()=> {\n//         setInstance([...instance, query]);\n//         console.log(instance);\n//         // console.log(query)\n//       };\n//     return <div>\n// <header>\n//         <div >\n//           <h1>Characters</h1>\n//         </div>\n//       </header>\n//       <main>\n//         <h3>{characterResults !== \"00000\" ? (characterResults.map(ch => \n//           <li>\n//           {ch}\n//           </li>\n//           )\n//         ):\n//         <li>\n//           <p>Add this value into the Dictionary</p>\n//          <button type=\"button\" onClick={this.handleAddValue}>Add</button>\n//         </li>\n//         }\n//           </h3>\n//         <aside>\n//           <form>\n//             <label>Search</label>\n//             <input type=\"text\" value={ query} onChange={onChange}/>\n//             <button type=\"button\" onClick={onSearch}>Search</button>\n//           </form>\n//         </aside>\n//       </main>\n//     </div>;\n//   }\n// }\n// export default Search;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Search = () => {\n  _s();\n\n  const [query, updateQuery] = useState('');\n  const [instance, setInstance] = useState([]);\n  const [characterResults, setCharacterResults] = useState([]); // let list = ['Please','Enter','Keyword'];\n  // fetch(text).then(function(response) {\n  //   response.text().then(function(text) {\n  //     setInstance(text.split(\"\\n\"));\n  //   });    \n  // });\n\n  fs.readFile(text, function (text) {\n    let textByLine = text.split(\"\\n\");\n  });\n  let options = {\n    shouldSort: true,\n    tokenize: true,\n    matchAllTokens: true,\n    findAllMatches: true,\n    threshold: 0,\n    location: 0,\n    distance: 0,\n    maxPatternLength: 32,\n    minMatchCharLength: 1 // don't include the keys property\n\n  };\n\n  const onChange = e => {\n    updateQuery(e.target.value);\n  };\n\n  const onSearch = () => {\n    const fuse = new Fuse(instance, options); // console.log(list)\n\n    const results = fuse.search(query);\n\n    if (results.length !== 0) {\n      setCharacterResults(results.map(character => character.item));\n    } else {\n      setCharacterResults(\"00000\");\n    }\n  };\n\n  const handleAddValue = () => {\n    setInstance([...instance, query]);\n    console.log(instance); // console.log(query)\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Characters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: characterResults !== \"00000\" ? characterResults.map(ch => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: ch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Add this value into the Dictionary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => handleAddValue(),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: query,\n            onChange: onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onSearch,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Search, \"YfzPJCU7oRv2uM1ilAVClvvgWJQ=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/dev/Desktop/TestProject/search/src/components/search.jsx"],"names":["React","useState","Fuse","text","fs","Search","query","updateQuery","instance","setInstance","characterResults","setCharacterResults","readFile","textByLine","split","options","shouldSort","tokenize","matchAllTokens","findAllMatches","threshold","location","distance","maxPatternLength","minMatchCharLength","onChange","e","target","value","onSearch","fuse","results","search","length","map","character","item","handleAddValue","console","log","ch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Fuse from 'fuse.js';\nimport text from './dictionary.txt';\nimport fs from 'fs';\n\n// import characters from './characters.json';\n// class Search extends Component {\n\n//   render() { \n//     const [query, updateQuery] = useState('');\n//     const [instance, setInstance]=useState([]);\n//     const [characterResults,setCharacterResults]=useState([]);\n//     // let list = ['Please','Enter','Keyword'];\n  \n//      fetch(text).then(function(response) {\n//       response.text().then(function(text) {\n//         setInstance(text.split(\"\\n\"));\n//       });\n      \n//     });\n//     let options = {\n//       shouldSort: true,\n//       tokenize: true,\n//       matchAllTokens: true,\n//       findAllMatches: true,\n//       threshold: 0,\n//       location: 0,\n//       distance: 0,\n//       maxPatternLength: 32,\n//       minMatchCharLength: 1,\n        \n//         // don't include the keys property\n//       };\n//     function onChange (e){\n//       updateQuery(e.target.value);\n//     };\n    \n    \n//       function onSearch() {\n//         const fuse = new Fuse(instance , options);\n//         // console.log(list)\n//         const results = fuse.search(query);\n      \n//         if(results.length!== 0)\n//         {\n//           setCharacterResults (results.map(character => character.item));\n//         }\n//         else\n//         {\n//           setCharacterResults(\"00000\");\n//         } \n        \n//       };\n    \n//       handleAddValue =()=> {\n      \n//         setInstance([...instance, query]);\n//         console.log(instance);\n//         // console.log(query)\n//       };\n//     return <div>\n\n\n// <header>\n//         <div >\n//           <h1>Characters</h1>\n//         </div>\n//       </header>\n\n//       <main>\n//         <h3>{characterResults !== \"00000\" ? (characterResults.map(ch => \n//           <li>\n//           {ch}\n//           </li>\n//           )\n//         ):\n//         <li>\n//           <p>Add this value into the Dictionary</p>\n//          <button type=\"button\" onClick={this.handleAddValue}>Add</button>\n//         </li>\n//         }\n//           </h3>\n//         <aside>\n//           <form>\n//             <label>Search</label>\n//             <input type=\"text\" value={ query} onChange={onChange}/>\n//             <button type=\"button\" onClick={onSearch}>Search</button>\n//           </form>\n//         </aside>\n//       </main>\n\n//     </div>;\n//   }\n// }\n \n// export default Search;\n\nconst Search = () => {\n  const [query, updateQuery] = useState('');\n  const [instance, setInstance]=useState([]);\n  const [characterResults,setCharacterResults]=useState([]);\n  // let list = ['Please','Enter','Keyword'];\n\n  // fetch(text).then(function(response) {\n  //   response.text().then(function(text) {\n  //     setInstance(text.split(\"\\n\"));\n  //   });    \n  // });\n\n    fs.readFile(text, function(text){\n        let textByLine = text.split(\"\\n\")\n    });\n\n  let options = {\n  shouldSort: true,\n  tokenize: true,\n  matchAllTokens: true,\n  findAllMatches: true,\n  threshold: 0,\n  location: 0,\n  distance: 0,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n    \n    // don't include the keys property\n  };\n\n  const onChange = (e) => {\n    updateQuery(e.target.value);\n  };\n\n\n  const onSearch = () => {\n    const fuse = new Fuse(instance , options);\n    // console.log(list)\n    const results = fuse.search(query);\n  \n    if(results.length!== 0)\n    {\n      setCharacterResults (results.map(character => character.item));\n    }\n    else\n    {\n      setCharacterResults(\"00000\");\n    } \n    \n  };\n\n  const handleAddValue = () => {\n\n    setInstance([...instance, query]);\n    console.log(instance);\n    // console.log(query)\n  };  \n\n  return (\n    <>\n\n      <header>\n        <div >\n          <h1>Characters</h1>\n        </div>\n      </header>\n\n      <main>\n        <h3>{characterResults !== \"00000\" ? (characterResults.map(ch => \n          <li>\n          {ch}\n          </li>\n          )\n        ):\n        <li>\n          <p>Add this value into the Dictionary</p>\n         <button type=\"button\" onClick={() => handleAddValue()}>Add</button>\n        </li>\n        }\n          </h3>\n        <aside>\n          <form>\n            <label>Search</label>\n            <input type=\"text\" value={ query} onChange={onChange}/>\n            <button type=\"button\" onClick={onSearch}>Search</button>\n          </form>\n        </aside>\n      </main>\n\n    </>\n  );\n\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}