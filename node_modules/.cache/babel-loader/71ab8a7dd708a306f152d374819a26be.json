{"ast":null,"code":"var _jsxFileName = \"/home/dev/Desktop/TestProject/search/src/components/find.jsx\";\nimport React, { Component } from 'react';\nimport Fuse from 'fuse.js';\nimport text from './dictionary.txt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Find extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: '',\n      instance: [],\n      characterResults: [],\n      options: {\n        shouldSort: true,\n        tokenize: true,\n        matchAllTokens: true,\n        findAllMatches: true,\n        threshold: 0,\n        location: 0,\n        distance: 0,\n        maxPatternLength: 32,\n        minMatchCharLength: 1 // don't include the keys property\n\n      }\n    };\n\n    this.onChange = e => {\n      this.setState({\n        query: e.target.value\n      });\n    };\n\n    this.onSearch = () => {\n      const fuse = new Fuse(this.state.instance, this.state.options); // console.log(list)\n\n      const results = fuse.search(this.state.query);\n\n      if (results.length !== 0) {\n        this.setState({\n          characterResults: results.map(character => character.item)\n        });\n      } else {\n        this.setState({\n          characterResults: \"00000\"\n        });\n      }\n    };\n\n    this.handleAddValue = () => {\n      const dist = [...this.state.instance, this.state.query];\n      this.setState({\n        instance: dist\n      });\n      console.log(this.state.instance); // console.log(query)\n    };\n  }\n\n  componentDidMount() {\n    fetch(text).then(response => response.text()).then(result => {\n      this.setState({\n        instance: result.split(\"\\n\")\n      });\n    });\n  }\n\n  render() {\n    // let list = ['Please','Enter','Keyword']\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.characterResults !== \"00000\" ? this.state.characterResults.map(ch => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: ch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Add this value into the Dictionary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => this.handleAddValue(),\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.query\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => this.onSearch(),\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Find;","map":{"version":3,"sources":["/home/dev/Desktop/TestProject/search/src/components/find.jsx"],"names":["React","Component","Fuse","text","Find","state","query","instance","characterResults","options","shouldSort","tokenize","matchAllTokens","findAllMatches","threshold","location","distance","maxPatternLength","minMatchCharLength","onChange","e","setState","target","value","onSearch","fuse","results","search","length","map","character","item","handleAddValue","dist","console","log","componentDidMount","fetch","then","response","result","split","render","ch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Fuse from 'fuse.js';\nimport text from './dictionary.txt';\n\nclass Find extends Component {\n  state={\n    query:'',\n    instance:[],\n    characterResults:[],\n   options : {\n      shouldSort: true,\n      tokenize: true,\n      matchAllTokens: true,\n      findAllMatches: true,\n      threshold: 0,\n      location: 0,\n      distance: 0,\n      maxPatternLength: 32,\n      minMatchCharLength: 1,\n        \n        // don't include the keys property\n      }\n  };\n  componentDidMount(){\n    \n      fetch(text)\n      .then((response) => response.text())\n      .then((result) => {\n        this.setState({instance: result.split(\"\\n\")});\n      });\n  }\n  \n      \n  onChange = (e) => {\n    this.setState({query: e.target.value});\n  };\n\n\n  onSearch = () => {\n    const fuse = new Fuse(this.state.instance , this.state.options);\n    // console.log(list)\n    const results = fuse.search(this.state.query);\n  \n    if(results.length!== 0)\n    {\n    this.setState({characterResults: results.map(character => character.item)});\n    }\n    else\n    {\n      this.setState({characterResults: \"00000\"});\n    } \n    \n  };\n\n  handleAddValue = () => {\n    const dist=[...this.state.instance,this.state.query];\n    this.setState({instance:dist});\n    console.log(this.state.instance);\n    // console.log(query)\n  };  \n    render() { \n        // let list = ['Please','Enter','Keyword']\n      \n        \n      \n       \n        return <div>\n\n<header>\n        <div >\n          <h1>Characters</h1>\n        </div>\n      </header>\n\n      <main>\n        <h3>{this.state.characterResults !== \"00000\" ? (this.state.characterResults.map(ch => \n          <li>\n          {ch}\n          </li>\n          )\n        ):\n        <li>\n          <p>Add this value into the Dictionary</p>\n         <button type=\"button\" onClick={() => this.handleAddValue()}>Add</button>\n        </li>\n        }\n          </h3>\n        <aside>\n          <form>\n            <label>Search</label>\n            <input type=\"text\" value={ this.state.query}/>\n            <button type=\"button\" onClick={()=>this.onSearch()}>Search</button>\n          </form>\n        </aside>\n      </main>\n        </div>;\n    }\n}\n \nexport default Find;"]},"metadata":{},"sourceType":"module"}